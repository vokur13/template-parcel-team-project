// @mixin centeredFlex($type: flex) {
//   display: $type;
//   align-items: center;
//   justify-content: center;
// }

@mixin font($fs: $font-size, $lh: $line-height, $fw: normal, $ls: null) {
  font-size: $fs;
  font-weight: $fw;
  line-height: $lh;
  letter-spacing: $ls;
}

// Media query helpers
//
// Usage example:
//
// @include mq(desktop) {
//   max-width: 1600px;
// }
//
@mixin mq($range) {
  $mobile: 320px;
  $tablet: 768px;
  $desktop: 1200px;

  @if $range == mobile-only {
    @media screen and (max-width: #{$tablet - 0.02}) {
      @content;
    }
  } @else if $range == mobile {
    @media screen and (min-width: $mobile) {
      @content;
    }
  } @else if $range == tablet-only {
    @media screen and (min-width: $tablet) and (max-width: #{$desktop - 0.02}) {
      @content;
    }
  } @else if $range == tablet {
    @media screen and (min-width: $tablet) {
      @content;
    }
  } @else if $range == tablet-max {
    @media screen and (max-width: #{$desktop - 0.02}) {
      @content;
    }
  } @else if $range == desktop {
    @media screen and (min-width: $desktop) {
      @content;
    }
  } @else if $range == retina {
    // 2x screens, retina
    @media screen and (min-device-pixel-ratio: 2),
      screen and (min-resolution: 192dpi),
      screen and (min-resolution: 2dppx) {
      @content;
    }
  }
}

//

// Button Mixin

// @mixin centeredFlex($type: flex) {
//   display: $type;

//   align-items: center;
//   text-align: center;
//   letter-spacing: 0.06em;

//   padding-top: 10px;
//   padding-bottom: 10px;
//   justify-content: center;

//   outline: 0;
//   outline-offset: 0;
//   border: none;

//   box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);
//   border-radius: 4px;
// }

// Icons Mixin

@mixin generateIcons($iconList) {
  @each $iconName in $iconList {
    &--#{$iconName} {
      background-image: url('../images/svg/icons/#{$iconName}.svg');
      background-position: center;
      background-repeat: no-repeat;
      background-size: contain;
    }
  }
}

/// Mixin to manage responsive breakpoints
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints

@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media screen and #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Fonts Mixin

@mixin font(
  $f-wgh: 400,
  $f-sze: 14px,
  $l-hgh: 24px,
  $l-spc: 0.03em,
  $clr: getColor('primary-text')
) {
  font-weight: $f-wgh;
  font-size: $f-sze;
  line-height: calc($l-hgh/$f-sze);
  letter-spacing: $l-spc;
  color: $clr;
}
